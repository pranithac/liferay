/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trianz.lms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.trianz.lms.model.LMSLeavePolicies;
import com.trianz.lms.model.LMSLeavePoliciesModel;
import com.trianz.lms.model.LMSLeavePoliciesSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LMSLeavePolicies service. Represents a row in the &quot;LMSLeavePolicies&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.trianz.lms.model.LMSLeavePoliciesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LMSLeavePoliciesImpl}.
 * </p>
 *
 * @author
 * @see LMSLeavePoliciesImpl
 * @see com.trianz.lms.model.LMSLeavePolicies
 * @see com.trianz.lms.model.LMSLeavePoliciesModel
 * @generated
 */
@JSON(strict = true)
public class LMSLeavePoliciesModelImpl extends BaseModelImpl<LMSLeavePolicies>
	implements LMSLeavePoliciesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l m s leave policies model instance should use the {@link com.trianz.lms.model.LMSLeavePolicies} interface instead.
	 */
	public static final String TABLE_NAME = "LMSLeavePolicies";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PolicyId", Types.INTEGER },
			{ "Project", Types.VARCHAR },
			{ "LeaveTypesApplicable", Types.VARCHAR },
			{ "LocationsApplicable", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LMSLeavePolicies (PolicyId INTEGER not null primary key,Project VARCHAR(75) null,LeaveTypesApplicable VARCHAR(75) null,LocationsApplicable VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LMSLeavePolicies";
	public static final String ORDER_BY_JPQL = " ORDER BY lmsLeavePolicies.PolicyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LMSLeavePolicies.PolicyId ASC";
	public static final String DATA_SOURCE = "devDS";
	public static final String SESSION_FACTORY = "devSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.trianz.lms.model.LMSLeavePolicies"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.trianz.lms.model.LMSLeavePolicies"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LMSLeavePolicies toModel(LMSLeavePoliciesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LMSLeavePolicies model = new LMSLeavePoliciesImpl();

		model.setPolicyId(soapModel.getPolicyId());
		model.setProject(soapModel.getProject());
		model.setLeaveTypesApplicable(soapModel.getLeaveTypesApplicable());
		model.setLocationsApplicable(soapModel.getLocationsApplicable());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LMSLeavePolicies> toModels(
		LMSLeavePoliciesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LMSLeavePolicies> models = new ArrayList<LMSLeavePolicies>(soapModels.length);

		for (LMSLeavePoliciesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.trianz.lms.model.LMSLeavePolicies"));

	public LMSLeavePoliciesModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _PolicyId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setPolicyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PolicyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LMSLeavePolicies.class;
	}

	@Override
	public String getModelClassName() {
		return LMSLeavePolicies.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PolicyId", getPolicyId());
		attributes.put("Project", getProject());
		attributes.put("LeaveTypesApplicable", getLeaveTypesApplicable());
		attributes.put("LocationsApplicable", getLocationsApplicable());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer PolicyId = (Integer)attributes.get("PolicyId");

		if (PolicyId != null) {
			setPolicyId(PolicyId);
		}

		String Project = (String)attributes.get("Project");

		if (Project != null) {
			setProject(Project);
		}

		String LeaveTypesApplicable = (String)attributes.get(
				"LeaveTypesApplicable");

		if (LeaveTypesApplicable != null) {
			setLeaveTypesApplicable(LeaveTypesApplicable);
		}

		String LocationsApplicable = (String)attributes.get(
				"LocationsApplicable");

		if (LocationsApplicable != null) {
			setLocationsApplicable(LocationsApplicable);
		}
	}

	@JSON
	@Override
	public int getPolicyId() {
		return _PolicyId;
	}

	@Override
	public void setPolicyId(int PolicyId) {
		_PolicyId = PolicyId;
	}

	@JSON
	@Override
	public String getProject() {
		if (_Project == null) {
			return StringPool.BLANK;
		}
		else {
			return _Project;
		}
	}

	@Override
	public void setProject(String Project) {
		_Project = Project;
	}

	@JSON
	@Override
	public String getLeaveTypesApplicable() {
		if (_LeaveTypesApplicable == null) {
			return StringPool.BLANK;
		}
		else {
			return _LeaveTypesApplicable;
		}
	}

	@Override
	public void setLeaveTypesApplicable(String LeaveTypesApplicable) {
		_LeaveTypesApplicable = LeaveTypesApplicable;
	}

	@JSON
	@Override
	public String getLocationsApplicable() {
		if (_LocationsApplicable == null) {
			return StringPool.BLANK;
		}
		else {
			return _LocationsApplicable;
		}
	}

	@Override
	public void setLocationsApplicable(String LocationsApplicable) {
		_LocationsApplicable = LocationsApplicable;
	}

	@Override
	public LMSLeavePolicies toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LMSLeavePolicies)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LMSLeavePoliciesImpl lmsLeavePoliciesImpl = new LMSLeavePoliciesImpl();

		lmsLeavePoliciesImpl.setPolicyId(getPolicyId());
		lmsLeavePoliciesImpl.setProject(getProject());
		lmsLeavePoliciesImpl.setLeaveTypesApplicable(getLeaveTypesApplicable());
		lmsLeavePoliciesImpl.setLocationsApplicable(getLocationsApplicable());

		lmsLeavePoliciesImpl.resetOriginalValues();

		return lmsLeavePoliciesImpl;
	}

	@Override
	public int compareTo(LMSLeavePolicies lmsLeavePolicies) {
		int primaryKey = lmsLeavePolicies.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LMSLeavePolicies)) {
			return false;
		}

		LMSLeavePolicies lmsLeavePolicies = (LMSLeavePolicies)obj;

		int primaryKey = lmsLeavePolicies.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LMSLeavePolicies> toCacheModel() {
		LMSLeavePoliciesCacheModel lmsLeavePoliciesCacheModel = new LMSLeavePoliciesCacheModel();

		lmsLeavePoliciesCacheModel.PolicyId = getPolicyId();

		lmsLeavePoliciesCacheModel.Project = getProject();

		String Project = lmsLeavePoliciesCacheModel.Project;

		if ((Project != null) && (Project.length() == 0)) {
			lmsLeavePoliciesCacheModel.Project = null;
		}

		lmsLeavePoliciesCacheModel.LeaveTypesApplicable = getLeaveTypesApplicable();

		String LeaveTypesApplicable = lmsLeavePoliciesCacheModel.LeaveTypesApplicable;

		if ((LeaveTypesApplicable != null) &&
				(LeaveTypesApplicable.length() == 0)) {
			lmsLeavePoliciesCacheModel.LeaveTypesApplicable = null;
		}

		lmsLeavePoliciesCacheModel.LocationsApplicable = getLocationsApplicable();

		String LocationsApplicable = lmsLeavePoliciesCacheModel.LocationsApplicable;

		if ((LocationsApplicable != null) &&
				(LocationsApplicable.length() == 0)) {
			lmsLeavePoliciesCacheModel.LocationsApplicable = null;
		}

		return lmsLeavePoliciesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{PolicyId=");
		sb.append(getPolicyId());
		sb.append(", Project=");
		sb.append(getProject());
		sb.append(", LeaveTypesApplicable=");
		sb.append(getLeaveTypesApplicable());
		sb.append(", LocationsApplicable=");
		sb.append(getLocationsApplicable());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.trianz.lms.model.LMSLeavePolicies");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PolicyId</column-name><column-value><![CDATA[");
		sb.append(getPolicyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Project</column-name><column-value><![CDATA[");
		sb.append(getProject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LeaveTypesApplicable</column-name><column-value><![CDATA[");
		sb.append(getLeaveTypesApplicable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LocationsApplicable</column-name><column-value><![CDATA[");
		sb.append(getLocationsApplicable());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LMSLeavePolicies.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LMSLeavePolicies.class
		};
	private int _PolicyId;
	private String _Project;
	private String _LeaveTypesApplicable;
	private String _LocationsApplicable;
	private LMSLeavePolicies _escapedModel;
}