/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trianz.lms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.trianz.lms.model.WFHManulPunch;
import com.trianz.lms.model.WFHManulPunchModel;
import com.trianz.lms.model.WFHManulPunchSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WFHManulPunch service. Represents a row in the &quot;WFHManulPunch&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.trianz.lms.model.WFHManulPunchModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WFHManulPunchImpl}.
 * </p>
 *
 * @author
 * @see WFHManulPunchImpl
 * @see com.trianz.lms.model.WFHManulPunch
 * @see com.trianz.lms.model.WFHManulPunchModel
 * @generated
 */
@JSON(strict = true)
public class WFHManulPunchModelImpl extends BaseModelImpl<WFHManulPunch>
	implements WFHManulPunchModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a w f h manul punch model instance should use the {@link com.trianz.lms.model.WFHManulPunch} interface instead.
	 */
	public static final String TABLE_NAME = "WFHManulPunch";
	public static final Object[][] TABLE_COLUMNS = {
			{ "WFHManualPunchId", Types.INTEGER },
			{ "WFHID", Types.INTEGER },
			{ "Intime", Types.TIMESTAMP },
			{ "OutTime", Types.TIMESTAMP },
			{ "CreatedBy", Types.VARCHAR },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "ModifiedBy", Types.VARCHAR },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "PUNCHDATE", Types.TIMESTAMP },
			{ "EmployeeID", Types.INTEGER },
			{ "IsApproved", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table WFHManulPunch (WFHManualPunchId INTEGER not null primary key,WFHID INTEGER,Intime DATE null,OutTime DATE null,CreatedBy VARCHAR(75) null,CreatedDate DATE null,ModifiedBy VARCHAR(75) null,ModifiedDate DATE null,PUNCHDATE DATE null,EmployeeID INTEGER,IsApproved BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table WFHManulPunch";
	public static final String ORDER_BY_JPQL = " ORDER BY wfhManulPunch.WFHManualPunchId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WFHManulPunch.WFHManualPunchId ASC";
	public static final String DATA_SOURCE = "devDS";
	public static final String SESSION_FACTORY = "devSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.trianz.lms.model.WFHManulPunch"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.trianz.lms.model.WFHManulPunch"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.trianz.lms.model.WFHManulPunch"),
			true);
	public static long EMPLOYEEID_COLUMN_BITMASK = 1L;
	public static long PUNCHDATE_COLUMN_BITMASK = 2L;
	public static long WFHMANUALPUNCHID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WFHManulPunch toModel(WFHManulPunchSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WFHManulPunch model = new WFHManulPunchImpl();

		model.setWFHManualPunchId(soapModel.getWFHManualPunchId());
		model.setWFHID(soapModel.getWFHID());
		model.setIntime(soapModel.getIntime());
		model.setOutTime(soapModel.getOutTime());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPUNCHDATE(soapModel.getPUNCHDATE());
		model.setEmployeeID(soapModel.getEmployeeID());
		model.setIsApproved(soapModel.getIsApproved());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WFHManulPunch> toModels(WFHManulPunchSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WFHManulPunch> models = new ArrayList<WFHManulPunch>(soapModels.length);

		for (WFHManulPunchSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.trianz.lms.model.WFHManulPunch"));

	public WFHManulPunchModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _WFHManualPunchId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setWFHManualPunchId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _WFHManualPunchId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WFHManulPunch.class;
	}

	@Override
	public String getModelClassName() {
		return WFHManulPunch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("WFHManualPunchId", getWFHManualPunchId());
		attributes.put("WFHID", getWFHID());
		attributes.put("Intime", getIntime());
		attributes.put("OutTime", getOutTime());
		attributes.put("CreatedBy", getCreatedBy());
		attributes.put("CreatedDate", getCreatedDate());
		attributes.put("ModifiedBy", getModifiedBy());
		attributes.put("ModifiedDate", getModifiedDate());
		attributes.put("PUNCHDATE", getPUNCHDATE());
		attributes.put("EmployeeID", getEmployeeID());
		attributes.put("IsApproved", getIsApproved());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer WFHManualPunchId = (Integer)attributes.get("WFHManualPunchId");

		if (WFHManualPunchId != null) {
			setWFHManualPunchId(WFHManualPunchId);
		}

		Integer WFHID = (Integer)attributes.get("WFHID");

		if (WFHID != null) {
			setWFHID(WFHID);
		}

		Date Intime = (Date)attributes.get("Intime");

		if (Intime != null) {
			setIntime(Intime);
		}

		Date OutTime = (Date)attributes.get("OutTime");

		if (OutTime != null) {
			setOutTime(OutTime);
		}

		String CreatedBy = (String)attributes.get("CreatedBy");

		if (CreatedBy != null) {
			setCreatedBy(CreatedBy);
		}

		Date CreatedDate = (Date)attributes.get("CreatedDate");

		if (CreatedDate != null) {
			setCreatedDate(CreatedDate);
		}

		String ModifiedBy = (String)attributes.get("ModifiedBy");

		if (ModifiedBy != null) {
			setModifiedBy(ModifiedBy);
		}

		Date ModifiedDate = (Date)attributes.get("ModifiedDate");

		if (ModifiedDate != null) {
			setModifiedDate(ModifiedDate);
		}

		Date PUNCHDATE = (Date)attributes.get("PUNCHDATE");

		if (PUNCHDATE != null) {
			setPUNCHDATE(PUNCHDATE);
		}

		Integer EmployeeID = (Integer)attributes.get("EmployeeID");

		if (EmployeeID != null) {
			setEmployeeID(EmployeeID);
		}

		Boolean IsApproved = (Boolean)attributes.get("IsApproved");

		if (IsApproved != null) {
			setIsApproved(IsApproved);
		}
	}

	@JSON
	@Override
	public int getWFHManualPunchId() {
		return _WFHManualPunchId;
	}

	@Override
	public void setWFHManualPunchId(int WFHManualPunchId) {
		_WFHManualPunchId = WFHManualPunchId;
	}

	@JSON
	@Override
	public int getWFHID() {
		return _WFHID;
	}

	@Override
	public void setWFHID(int WFHID) {
		_WFHID = WFHID;
	}

	@JSON
	@Override
	public Date getIntime() {
		return _Intime;
	}

	@Override
	public void setIntime(Date Intime) {
		_Intime = Intime;
	}

	@JSON
	@Override
	public Date getOutTime() {
		return _OutTime;
	}

	@Override
	public void setOutTime(Date OutTime) {
		_OutTime = OutTime;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_CreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _CreatedBy;
		}
	}

	@Override
	public void setCreatedBy(String CreatedBy) {
		_CreatedBy = CreatedBy;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _CreatedDate;
	}

	@Override
	public void setCreatedDate(Date CreatedDate) {
		_CreatedDate = CreatedDate;
	}

	@JSON
	@Override
	public String getModifiedBy() {
		if (_ModifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _ModifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String ModifiedBy) {
		_ModifiedBy = ModifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _ModifiedDate;
	}

	@Override
	public void setModifiedDate(Date ModifiedDate) {
		_ModifiedDate = ModifiedDate;
	}

	@JSON
	@Override
	public Date getPUNCHDATE() {
		return _PUNCHDATE;
	}

	@Override
	public void setPUNCHDATE(Date PUNCHDATE) {
		_columnBitmask |= PUNCHDATE_COLUMN_BITMASK;

		if (_originalPUNCHDATE == null) {
			_originalPUNCHDATE = _PUNCHDATE;
		}

		_PUNCHDATE = PUNCHDATE;
	}

	public Date getOriginalPUNCHDATE() {
		return _originalPUNCHDATE;
	}

	@JSON
	@Override
	public int getEmployeeID() {
		return _EmployeeID;
	}

	@Override
	public void setEmployeeID(int EmployeeID) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeID) {
			_setOriginalEmployeeID = true;

			_originalEmployeeID = _EmployeeID;
		}

		_EmployeeID = EmployeeID;
	}

	public int getOriginalEmployeeID() {
		return _originalEmployeeID;
	}

	@JSON
	@Override
	public boolean getIsApproved() {
		return _IsApproved;
	}

	@Override
	public boolean isIsApproved() {
		return _IsApproved;
	}

	@Override
	public void setIsApproved(boolean IsApproved) {
		_IsApproved = IsApproved;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public WFHManulPunch toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WFHManulPunch)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WFHManulPunchImpl wfhManulPunchImpl = new WFHManulPunchImpl();

		wfhManulPunchImpl.setWFHManualPunchId(getWFHManualPunchId());
		wfhManulPunchImpl.setWFHID(getWFHID());
		wfhManulPunchImpl.setIntime(getIntime());
		wfhManulPunchImpl.setOutTime(getOutTime());
		wfhManulPunchImpl.setCreatedBy(getCreatedBy());
		wfhManulPunchImpl.setCreatedDate(getCreatedDate());
		wfhManulPunchImpl.setModifiedBy(getModifiedBy());
		wfhManulPunchImpl.setModifiedDate(getModifiedDate());
		wfhManulPunchImpl.setPUNCHDATE(getPUNCHDATE());
		wfhManulPunchImpl.setEmployeeID(getEmployeeID());
		wfhManulPunchImpl.setIsApproved(getIsApproved());

		wfhManulPunchImpl.resetOriginalValues();

		return wfhManulPunchImpl;
	}

	@Override
	public int compareTo(WFHManulPunch wfhManulPunch) {
		int primaryKey = wfhManulPunch.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WFHManulPunch)) {
			return false;
		}

		WFHManulPunch wfhManulPunch = (WFHManulPunch)obj;

		int primaryKey = wfhManulPunch.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WFHManulPunchModelImpl wfhManulPunchModelImpl = this;

		wfhManulPunchModelImpl._originalPUNCHDATE = wfhManulPunchModelImpl._PUNCHDATE;

		wfhManulPunchModelImpl._originalEmployeeID = wfhManulPunchModelImpl._EmployeeID;

		wfhManulPunchModelImpl._setOriginalEmployeeID = false;

		wfhManulPunchModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WFHManulPunch> toCacheModel() {
		WFHManulPunchCacheModel wfhManulPunchCacheModel = new WFHManulPunchCacheModel();

		wfhManulPunchCacheModel.WFHManualPunchId = getWFHManualPunchId();

		wfhManulPunchCacheModel.WFHID = getWFHID();

		Date Intime = getIntime();

		if (Intime != null) {
			wfhManulPunchCacheModel.Intime = Intime.getTime();
		}
		else {
			wfhManulPunchCacheModel.Intime = Long.MIN_VALUE;
		}

		Date OutTime = getOutTime();

		if (OutTime != null) {
			wfhManulPunchCacheModel.OutTime = OutTime.getTime();
		}
		else {
			wfhManulPunchCacheModel.OutTime = Long.MIN_VALUE;
		}

		wfhManulPunchCacheModel.CreatedBy = getCreatedBy();

		String CreatedBy = wfhManulPunchCacheModel.CreatedBy;

		if ((CreatedBy != null) && (CreatedBy.length() == 0)) {
			wfhManulPunchCacheModel.CreatedBy = null;
		}

		Date CreatedDate = getCreatedDate();

		if (CreatedDate != null) {
			wfhManulPunchCacheModel.CreatedDate = CreatedDate.getTime();
		}
		else {
			wfhManulPunchCacheModel.CreatedDate = Long.MIN_VALUE;
		}

		wfhManulPunchCacheModel.ModifiedBy = getModifiedBy();

		String ModifiedBy = wfhManulPunchCacheModel.ModifiedBy;

		if ((ModifiedBy != null) && (ModifiedBy.length() == 0)) {
			wfhManulPunchCacheModel.ModifiedBy = null;
		}

		Date ModifiedDate = getModifiedDate();

		if (ModifiedDate != null) {
			wfhManulPunchCacheModel.ModifiedDate = ModifiedDate.getTime();
		}
		else {
			wfhManulPunchCacheModel.ModifiedDate = Long.MIN_VALUE;
		}

		Date PUNCHDATE = getPUNCHDATE();

		if (PUNCHDATE != null) {
			wfhManulPunchCacheModel.PUNCHDATE = PUNCHDATE.getTime();
		}
		else {
			wfhManulPunchCacheModel.PUNCHDATE = Long.MIN_VALUE;
		}

		wfhManulPunchCacheModel.EmployeeID = getEmployeeID();

		wfhManulPunchCacheModel.IsApproved = getIsApproved();

		return wfhManulPunchCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{WFHManualPunchId=");
		sb.append(getWFHManualPunchId());
		sb.append(", WFHID=");
		sb.append(getWFHID());
		sb.append(", Intime=");
		sb.append(getIntime());
		sb.append(", OutTime=");
		sb.append(getOutTime());
		sb.append(", CreatedBy=");
		sb.append(getCreatedBy());
		sb.append(", CreatedDate=");
		sb.append(getCreatedDate());
		sb.append(", ModifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", ModifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", PUNCHDATE=");
		sb.append(getPUNCHDATE());
		sb.append(", EmployeeID=");
		sb.append(getEmployeeID());
		sb.append(", IsApproved=");
		sb.append(getIsApproved());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.trianz.lms.model.WFHManulPunch");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>WFHManualPunchId</column-name><column-value><![CDATA[");
		sb.append(getWFHManualPunchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>WFHID</column-name><column-value><![CDATA[");
		sb.append(getWFHID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Intime</column-name><column-value><![CDATA[");
		sb.append(getIntime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>OutTime</column-name><column-value><![CDATA[");
		sb.append(getOutTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PUNCHDATE</column-name><column-value><![CDATA[");
		sb.append(getPUNCHDATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EmployeeID</column-name><column-value><![CDATA[");
		sb.append(getEmployeeID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IsApproved</column-name><column-value><![CDATA[");
		sb.append(getIsApproved());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WFHManulPunch.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WFHManulPunch.class
		};
	private int _WFHManualPunchId;
	private int _WFHID;
	private Date _Intime;
	private Date _OutTime;
	private String _CreatedBy;
	private Date _CreatedDate;
	private String _ModifiedBy;
	private Date _ModifiedDate;
	private Date _PUNCHDATE;
	private Date _originalPUNCHDATE;
	private int _EmployeeID;
	private int _originalEmployeeID;
	private boolean _setOriginalEmployeeID;
	private boolean _IsApproved;
	private long _columnBitmask;
	private WFHManulPunch _escapedModel;
}