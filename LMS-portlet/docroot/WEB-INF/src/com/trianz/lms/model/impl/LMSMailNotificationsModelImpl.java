/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trianz.lms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.trianz.lms.model.LMSMailNotifications;
import com.trianz.lms.model.LMSMailNotificationsModel;
import com.trianz.lms.model.LMSMailNotificationsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LMSMailNotifications service. Represents a row in the &quot;LMSMailNotifications&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.trianz.lms.model.LMSMailNotificationsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LMSMailNotificationsImpl}.
 * </p>
 *
 * @author
 * @see LMSMailNotificationsImpl
 * @see com.trianz.lms.model.LMSMailNotifications
 * @see com.trianz.lms.model.LMSMailNotificationsModel
 * @generated
 */
@JSON(strict = true)
public class LMSMailNotificationsModelImpl extends BaseModelImpl<LMSMailNotifications>
	implements LMSMailNotificationsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l m s mail notifications model instance should use the {@link com.trianz.lms.model.LMSMailNotifications} interface instead.
	 */
	public static final String TABLE_NAME = "LMSMailNotifications";
	public static final Object[][] TABLE_COLUMNS = {
			{ "MailNotfnId", Types.INTEGER },
			{ "LeaveRequestId", Types.VARCHAR },
			{ "FromAddrs", Types.VARCHAR },
			{ "ToAddrs", Types.VARCHAR },
			{ "Comments", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LMSMailNotifications (MailNotfnId INTEGER not null primary key IDENTITY,LeaveRequestId VARCHAR(75) null,FromAddrs VARCHAR(75) null,ToAddrs VARCHAR(75) null,Comments VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LMSMailNotifications";
	public static final String ORDER_BY_JPQL = " ORDER BY lmsMailNotifications.MailNotfnId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LMSMailNotifications.MailNotfnId ASC";
	public static final String DATA_SOURCE = "devDS";
	public static final String SESSION_FACTORY = "devSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.trianz.lms.model.LMSMailNotifications"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.trianz.lms.model.LMSMailNotifications"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.trianz.lms.model.LMSMailNotifications"),
			true);
	public static long LEAVEREQUESTID_COLUMN_BITMASK = 1L;
	public static long MAILNOTFNID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LMSMailNotifications toModel(
		LMSMailNotificationsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LMSMailNotifications model = new LMSMailNotificationsImpl();

		model.setMailNotfnId(soapModel.getMailNotfnId());
		model.setLeaveRequestId(soapModel.getLeaveRequestId());
		model.setFromAddrs(soapModel.getFromAddrs());
		model.setToAddrs(soapModel.getToAddrs());
		model.setComments(soapModel.getComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LMSMailNotifications> toModels(
		LMSMailNotificationsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LMSMailNotifications> models = new ArrayList<LMSMailNotifications>(soapModels.length);

		for (LMSMailNotificationsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.trianz.lms.model.LMSMailNotifications"));

	public LMSMailNotificationsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _MailNotfnId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setMailNotfnId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _MailNotfnId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LMSMailNotifications.class;
	}

	@Override
	public String getModelClassName() {
		return LMSMailNotifications.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("MailNotfnId", getMailNotfnId());
		attributes.put("LeaveRequestId", getLeaveRequestId());
		attributes.put("FromAddrs", getFromAddrs());
		attributes.put("ToAddrs", getToAddrs());
		attributes.put("Comments", getComments());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer MailNotfnId = (Integer)attributes.get("MailNotfnId");

		if (MailNotfnId != null) {
			setMailNotfnId(MailNotfnId);
		}

		String LeaveRequestId = (String)attributes.get("LeaveRequestId");

		if (LeaveRequestId != null) {
			setLeaveRequestId(LeaveRequestId);
		}

		String FromAddrs = (String)attributes.get("FromAddrs");

		if (FromAddrs != null) {
			setFromAddrs(FromAddrs);
		}

		String ToAddrs = (String)attributes.get("ToAddrs");

		if (ToAddrs != null) {
			setToAddrs(ToAddrs);
		}

		String Comments = (String)attributes.get("Comments");

		if (Comments != null) {
			setComments(Comments);
		}
	}

	@JSON
	@Override
	public int getMailNotfnId() {
		return _MailNotfnId;
	}

	@Override
	public void setMailNotfnId(int MailNotfnId) {
		_MailNotfnId = MailNotfnId;
	}

	@JSON
	@Override
	public String getLeaveRequestId() {
		if (_LeaveRequestId == null) {
			return StringPool.BLANK;
		}
		else {
			return _LeaveRequestId;
		}
	}

	@Override
	public void setLeaveRequestId(String LeaveRequestId) {
		_columnBitmask |= LEAVEREQUESTID_COLUMN_BITMASK;

		if (_originalLeaveRequestId == null) {
			_originalLeaveRequestId = _LeaveRequestId;
		}

		_LeaveRequestId = LeaveRequestId;
	}

	public String getOriginalLeaveRequestId() {
		return GetterUtil.getString(_originalLeaveRequestId);
	}

	@JSON
	@Override
	public String getFromAddrs() {
		if (_FromAddrs == null) {
			return StringPool.BLANK;
		}
		else {
			return _FromAddrs;
		}
	}

	@Override
	public void setFromAddrs(String FromAddrs) {
		_FromAddrs = FromAddrs;
	}

	@JSON
	@Override
	public String getToAddrs() {
		if (_ToAddrs == null) {
			return StringPool.BLANK;
		}
		else {
			return _ToAddrs;
		}
	}

	@Override
	public void setToAddrs(String ToAddrs) {
		_ToAddrs = ToAddrs;
	}

	@JSON
	@Override
	public String getComments() {
		if (_Comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _Comments;
		}
	}

	@Override
	public void setComments(String Comments) {
		_Comments = Comments;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public LMSMailNotifications toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LMSMailNotifications)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LMSMailNotificationsImpl lmsMailNotificationsImpl = new LMSMailNotificationsImpl();

		lmsMailNotificationsImpl.setMailNotfnId(getMailNotfnId());
		lmsMailNotificationsImpl.setLeaveRequestId(getLeaveRequestId());
		lmsMailNotificationsImpl.setFromAddrs(getFromAddrs());
		lmsMailNotificationsImpl.setToAddrs(getToAddrs());
		lmsMailNotificationsImpl.setComments(getComments());

		lmsMailNotificationsImpl.resetOriginalValues();

		return lmsMailNotificationsImpl;
	}

	@Override
	public int compareTo(LMSMailNotifications lmsMailNotifications) {
		int primaryKey = lmsMailNotifications.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LMSMailNotifications)) {
			return false;
		}

		LMSMailNotifications lmsMailNotifications = (LMSMailNotifications)obj;

		int primaryKey = lmsMailNotifications.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LMSMailNotificationsModelImpl lmsMailNotificationsModelImpl = this;

		lmsMailNotificationsModelImpl._originalLeaveRequestId = lmsMailNotificationsModelImpl._LeaveRequestId;

		lmsMailNotificationsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LMSMailNotifications> toCacheModel() {
		LMSMailNotificationsCacheModel lmsMailNotificationsCacheModel = new LMSMailNotificationsCacheModel();

		lmsMailNotificationsCacheModel.MailNotfnId = getMailNotfnId();

		lmsMailNotificationsCacheModel.LeaveRequestId = getLeaveRequestId();

		String LeaveRequestId = lmsMailNotificationsCacheModel.LeaveRequestId;

		if ((LeaveRequestId != null) && (LeaveRequestId.length() == 0)) {
			lmsMailNotificationsCacheModel.LeaveRequestId = null;
		}

		lmsMailNotificationsCacheModel.FromAddrs = getFromAddrs();

		String FromAddrs = lmsMailNotificationsCacheModel.FromAddrs;

		if ((FromAddrs != null) && (FromAddrs.length() == 0)) {
			lmsMailNotificationsCacheModel.FromAddrs = null;
		}

		lmsMailNotificationsCacheModel.ToAddrs = getToAddrs();

		String ToAddrs = lmsMailNotificationsCacheModel.ToAddrs;

		if ((ToAddrs != null) && (ToAddrs.length() == 0)) {
			lmsMailNotificationsCacheModel.ToAddrs = null;
		}

		lmsMailNotificationsCacheModel.Comments = getComments();

		String Comments = lmsMailNotificationsCacheModel.Comments;

		if ((Comments != null) && (Comments.length() == 0)) {
			lmsMailNotificationsCacheModel.Comments = null;
		}

		return lmsMailNotificationsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{MailNotfnId=");
		sb.append(getMailNotfnId());
		sb.append(", LeaveRequestId=");
		sb.append(getLeaveRequestId());
		sb.append(", FromAddrs=");
		sb.append(getFromAddrs());
		sb.append(", ToAddrs=");
		sb.append(getToAddrs());
		sb.append(", Comments=");
		sb.append(getComments());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.trianz.lms.model.LMSMailNotifications");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>MailNotfnId</column-name><column-value><![CDATA[");
		sb.append(getMailNotfnId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LeaveRequestId</column-name><column-value><![CDATA[");
		sb.append(getLeaveRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FromAddrs</column-name><column-value><![CDATA[");
		sb.append(getFromAddrs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ToAddrs</column-name><column-value><![CDATA[");
		sb.append(getToAddrs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LMSMailNotifications.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LMSMailNotifications.class
		};
	private int _MailNotfnId;
	private String _LeaveRequestId;
	private String _originalLeaveRequestId;
	private String _FromAddrs;
	private String _ToAddrs;
	private String _Comments;
	private long _columnBitmask;
	private LMSMailNotifications _escapedModel;
}