/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trianz.lms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.trianz.lms.model.LMSLeaveInformation;
import com.trianz.lms.model.LMSLeaveInformationModel;
import com.trianz.lms.model.LMSLeaveInformationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LMSLeaveInformation service. Represents a row in the &quot;LMSLeaveInformation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.trianz.lms.model.LMSLeaveInformationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LMSLeaveInformationImpl}.
 * </p>
 *
 * @author
 * @see LMSLeaveInformationImpl
 * @see com.trianz.lms.model.LMSLeaveInformation
 * @see com.trianz.lms.model.LMSLeaveInformationModel
 * @generated
 */
@JSON(strict = true)
public class LMSLeaveInformationModelImpl extends BaseModelImpl<LMSLeaveInformation>
	implements LMSLeaveInformationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l m s leave information model instance should use the {@link com.trianz.lms.model.LMSLeaveInformation} interface instead.
	 */
	public static final String TABLE_NAME = "LMSLeaveInformation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SNo", Types.INTEGER },
			{ "LeaveRequestId", Types.VARCHAR },
			{ "EmployeeId", Types.INTEGER },
			{ "AbsenceType", Types.VARCHAR },
			{ "LeaveTypeCode", Types.INTEGER },
			{ "LeaveCategoryCode", Types.VARCHAR },
			{ "SupervisorID", Types.INTEGER },
			{ "StartDate", Types.TIMESTAMP },
			{ "EndDate", Types.TIMESTAMP },
			{ "Duration", Types.DOUBLE },
			{ "ApprovalStatus", Types.VARCHAR },
			{ "Comments", Types.VARCHAR },
			{ "isDraft", Types.VARCHAR },
			{ "Approvers", Types.INTEGER },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "ApproverEmails", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LMSLeaveInformation (SNo INTEGER not null primary key,LeaveRequestId VARCHAR(75) null,EmployeeId INTEGER,AbsenceType VARCHAR(75) null,LeaveTypeCode INTEGER,LeaveCategoryCode VARCHAR(75) null,SupervisorID INTEGER,StartDate DATE null,EndDate DATE null,Duration DOUBLE,ApprovalStatus VARCHAR(75) null,Comments VARCHAR(75) null,isDraft VARCHAR(75) null,Approvers INTEGER,CreatedDate DATE null,ApproverEmails VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LMSLeaveInformation";
	public static final String ORDER_BY_JPQL = " ORDER BY lmsLeaveInformation.LeaveRequestId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LMSLeaveInformation.LeaveRequestId ASC";
	public static final String DATA_SOURCE = "devDS";
	public static final String SESSION_FACTORY = "devSessionFactory";
	public static final String TX_MANAGER = "devTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.trianz.lms.model.LMSLeaveInformation"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.trianz.lms.model.LMSLeaveInformation"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.trianz.lms.model.LMSLeaveInformation"),
			true);
	public static long APPROVALSTATUS_COLUMN_BITMASK = 1L;
	public static long APPROVEREMAILS_COLUMN_BITMASK = 2L;
	public static long EMPLOYEEID_COLUMN_BITMASK = 4L;
	public static long LEAVEREQUESTID_COLUMN_BITMASK = 8L;
	public static long ISDRAFT_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LMSLeaveInformation toModel(LMSLeaveInformationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LMSLeaveInformation model = new LMSLeaveInformationImpl();

		model.setSNo(soapModel.getSNo());
		model.setLeaveRequestId(soapModel.getLeaveRequestId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setAbsenceType(soapModel.getAbsenceType());
		model.setLeaveTypeCode(soapModel.getLeaveTypeCode());
		model.setLeaveCategoryCode(soapModel.getLeaveCategoryCode());
		model.setSupervisorID(soapModel.getSupervisorID());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setDuration(soapModel.getDuration());
		model.setApprovalStatus(soapModel.getApprovalStatus());
		model.setComments(soapModel.getComments());
		model.setIsDraft(soapModel.getIsDraft());
		model.setApprovers(soapModel.getApprovers());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setApproverEmails(soapModel.getApproverEmails());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LMSLeaveInformation> toModels(
		LMSLeaveInformationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LMSLeaveInformation> models = new ArrayList<LMSLeaveInformation>(soapModels.length);

		for (LMSLeaveInformationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.trianz.lms.model.LMSLeaveInformation"));

	public LMSLeaveInformationModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _SNo;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setSNo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _SNo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LMSLeaveInformation.class;
	}

	@Override
	public String getModelClassName() {
		return LMSLeaveInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("SNo", getSNo());
		attributes.put("LeaveRequestId", getLeaveRequestId());
		attributes.put("EmployeeId", getEmployeeId());
		attributes.put("AbsenceType", getAbsenceType());
		attributes.put("LeaveTypeCode", getLeaveTypeCode());
		attributes.put("LeaveCategoryCode", getLeaveCategoryCode());
		attributes.put("SupervisorID", getSupervisorID());
		attributes.put("StartDate", getStartDate());
		attributes.put("EndDate", getEndDate());
		attributes.put("Duration", getDuration());
		attributes.put("ApprovalStatus", getApprovalStatus());
		attributes.put("Comments", getComments());
		attributes.put("isDraft", getIsDraft());
		attributes.put("Approvers", getApprovers());
		attributes.put("CreatedDate", getCreatedDate());
		attributes.put("ApproverEmails", getApproverEmails());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer SNo = (Integer)attributes.get("SNo");

		if (SNo != null) {
			setSNo(SNo);
		}

		String LeaveRequestId = (String)attributes.get("LeaveRequestId");

		if (LeaveRequestId != null) {
			setLeaveRequestId(LeaveRequestId);
		}

		Integer EmployeeId = (Integer)attributes.get("EmployeeId");

		if (EmployeeId != null) {
			setEmployeeId(EmployeeId);
		}

		String AbsenceType = (String)attributes.get("AbsenceType");

		if (AbsenceType != null) {
			setAbsenceType(AbsenceType);
		}

		Integer LeaveTypeCode = (Integer)attributes.get("LeaveTypeCode");

		if (LeaveTypeCode != null) {
			setLeaveTypeCode(LeaveTypeCode);
		}

		String LeaveCategoryCode = (String)attributes.get("LeaveCategoryCode");

		if (LeaveCategoryCode != null) {
			setLeaveCategoryCode(LeaveCategoryCode);
		}

		Integer SupervisorID = (Integer)attributes.get("SupervisorID");

		if (SupervisorID != null) {
			setSupervisorID(SupervisorID);
		}

		Date StartDate = (Date)attributes.get("StartDate");

		if (StartDate != null) {
			setStartDate(StartDate);
		}

		Date EndDate = (Date)attributes.get("EndDate");

		if (EndDate != null) {
			setEndDate(EndDate);
		}

		Double Duration = (Double)attributes.get("Duration");

		if (Duration != null) {
			setDuration(Duration);
		}

		String ApprovalStatus = (String)attributes.get("ApprovalStatus");

		if (ApprovalStatus != null) {
			setApprovalStatus(ApprovalStatus);
		}

		String Comments = (String)attributes.get("Comments");

		if (Comments != null) {
			setComments(Comments);
		}

		String isDraft = (String)attributes.get("isDraft");

		if (isDraft != null) {
			setIsDraft(isDraft);
		}

		Integer Approvers = (Integer)attributes.get("Approvers");

		if (Approvers != null) {
			setApprovers(Approvers);
		}

		Date CreatedDate = (Date)attributes.get("CreatedDate");

		if (CreatedDate != null) {
			setCreatedDate(CreatedDate);
		}

		String ApproverEmails = (String)attributes.get("ApproverEmails");

		if (ApproverEmails != null) {
			setApproverEmails(ApproverEmails);
		}
	}

	@JSON
	@Override
	public int getSNo() {
		return _SNo;
	}

	@Override
	public void setSNo(int SNo) {
		_SNo = SNo;
	}

	@JSON
	@Override
	public String getLeaveRequestId() {
		if (_LeaveRequestId == null) {
			return StringPool.BLANK;
		}
		else {
			return _LeaveRequestId;
		}
	}

	@Override
	public void setLeaveRequestId(String LeaveRequestId) {
		_columnBitmask = -1L;

		if (_originalLeaveRequestId == null) {
			_originalLeaveRequestId = _LeaveRequestId;
		}

		_LeaveRequestId = LeaveRequestId;
	}

	public String getOriginalLeaveRequestId() {
		return GetterUtil.getString(_originalLeaveRequestId);
	}

	@JSON
	@Override
	public int getEmployeeId() {
		return _EmployeeId;
	}

	@Override
	public void setEmployeeId(int EmployeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _EmployeeId;
		}

		_EmployeeId = EmployeeId;
	}

	public int getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public String getAbsenceType() {
		if (_AbsenceType == null) {
			return StringPool.BLANK;
		}
		else {
			return _AbsenceType;
		}
	}

	@Override
	public void setAbsenceType(String AbsenceType) {
		_AbsenceType = AbsenceType;
	}

	@JSON
	@Override
	public int getLeaveTypeCode() {
		return _LeaveTypeCode;
	}

	@Override
	public void setLeaveTypeCode(int LeaveTypeCode) {
		_LeaveTypeCode = LeaveTypeCode;
	}

	@JSON
	@Override
	public String getLeaveCategoryCode() {
		if (_LeaveCategoryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _LeaveCategoryCode;
		}
	}

	@Override
	public void setLeaveCategoryCode(String LeaveCategoryCode) {
		_LeaveCategoryCode = LeaveCategoryCode;
	}

	@JSON
	@Override
	public int getSupervisorID() {
		return _SupervisorID;
	}

	@Override
	public void setSupervisorID(int SupervisorID) {
		_SupervisorID = SupervisorID;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _StartDate;
	}

	@Override
	public void setStartDate(Date StartDate) {
		_StartDate = StartDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _EndDate;
	}

	@Override
	public void setEndDate(Date EndDate) {
		_EndDate = EndDate;
	}

	@JSON
	@Override
	public double getDuration() {
		return _Duration;
	}

	@Override
	public void setDuration(double Duration) {
		_Duration = Duration;
	}

	@JSON
	@Override
	public String getApprovalStatus() {
		if (_ApprovalStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _ApprovalStatus;
		}
	}

	@Override
	public void setApprovalStatus(String ApprovalStatus) {
		_columnBitmask |= APPROVALSTATUS_COLUMN_BITMASK;

		if (_originalApprovalStatus == null) {
			_originalApprovalStatus = _ApprovalStatus;
		}

		_ApprovalStatus = ApprovalStatus;
	}

	public String getOriginalApprovalStatus() {
		return GetterUtil.getString(_originalApprovalStatus);
	}

	@JSON
	@Override
	public String getComments() {
		if (_Comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _Comments;
		}
	}

	@Override
	public void setComments(String Comments) {
		_Comments = Comments;
	}

	@JSON
	@Override
	public String getIsDraft() {
		if (_isDraft == null) {
			return StringPool.BLANK;
		}
		else {
			return _isDraft;
		}
	}

	@Override
	public void setIsDraft(String isDraft) {
		_columnBitmask |= ISDRAFT_COLUMN_BITMASK;

		if (_originalIsDraft == null) {
			_originalIsDraft = _isDraft;
		}

		_isDraft = isDraft;
	}

	public String getOriginalIsDraft() {
		return GetterUtil.getString(_originalIsDraft);
	}

	@JSON
	@Override
	public int getApprovers() {
		return _Approvers;
	}

	@Override
	public void setApprovers(int Approvers) {
		_Approvers = Approvers;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _CreatedDate;
	}

	@Override
	public void setCreatedDate(Date CreatedDate) {
		_CreatedDate = CreatedDate;
	}

	@JSON
	@Override
	public String getApproverEmails() {
		if (_ApproverEmails == null) {
			return StringPool.BLANK;
		}
		else {
			return _ApproverEmails;
		}
	}

	@Override
	public void setApproverEmails(String ApproverEmails) {
		_columnBitmask |= APPROVEREMAILS_COLUMN_BITMASK;

		if (_originalApproverEmails == null) {
			_originalApproverEmails = _ApproverEmails;
		}

		_ApproverEmails = ApproverEmails;
	}

	public String getOriginalApproverEmails() {
		return GetterUtil.getString(_originalApproverEmails);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public LMSLeaveInformation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LMSLeaveInformation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LMSLeaveInformationImpl lmsLeaveInformationImpl = new LMSLeaveInformationImpl();

		lmsLeaveInformationImpl.setSNo(getSNo());
		lmsLeaveInformationImpl.setLeaveRequestId(getLeaveRequestId());
		lmsLeaveInformationImpl.setEmployeeId(getEmployeeId());
		lmsLeaveInformationImpl.setAbsenceType(getAbsenceType());
		lmsLeaveInformationImpl.setLeaveTypeCode(getLeaveTypeCode());
		lmsLeaveInformationImpl.setLeaveCategoryCode(getLeaveCategoryCode());
		lmsLeaveInformationImpl.setSupervisorID(getSupervisorID());
		lmsLeaveInformationImpl.setStartDate(getStartDate());
		lmsLeaveInformationImpl.setEndDate(getEndDate());
		lmsLeaveInformationImpl.setDuration(getDuration());
		lmsLeaveInformationImpl.setApprovalStatus(getApprovalStatus());
		lmsLeaveInformationImpl.setComments(getComments());
		lmsLeaveInformationImpl.setIsDraft(getIsDraft());
		lmsLeaveInformationImpl.setApprovers(getApprovers());
		lmsLeaveInformationImpl.setCreatedDate(getCreatedDate());
		lmsLeaveInformationImpl.setApproverEmails(getApproverEmails());

		lmsLeaveInformationImpl.resetOriginalValues();

		return lmsLeaveInformationImpl;
	}

	@Override
	public int compareTo(LMSLeaveInformation lmsLeaveInformation) {
		int value = 0;

		value = getLeaveRequestId()
					.compareTo(lmsLeaveInformation.getLeaveRequestId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LMSLeaveInformation)) {
			return false;
		}

		LMSLeaveInformation lmsLeaveInformation = (LMSLeaveInformation)obj;

		int primaryKey = lmsLeaveInformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LMSLeaveInformationModelImpl lmsLeaveInformationModelImpl = this;

		lmsLeaveInformationModelImpl._originalLeaveRequestId = lmsLeaveInformationModelImpl._LeaveRequestId;

		lmsLeaveInformationModelImpl._originalEmployeeId = lmsLeaveInformationModelImpl._EmployeeId;

		lmsLeaveInformationModelImpl._setOriginalEmployeeId = false;

		lmsLeaveInformationModelImpl._originalApprovalStatus = lmsLeaveInformationModelImpl._ApprovalStatus;

		lmsLeaveInformationModelImpl._originalIsDraft = lmsLeaveInformationModelImpl._isDraft;

		lmsLeaveInformationModelImpl._originalApproverEmails = lmsLeaveInformationModelImpl._ApproverEmails;

		lmsLeaveInformationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LMSLeaveInformation> toCacheModel() {
		LMSLeaveInformationCacheModel lmsLeaveInformationCacheModel = new LMSLeaveInformationCacheModel();

		lmsLeaveInformationCacheModel.SNo = getSNo();

		lmsLeaveInformationCacheModel.LeaveRequestId = getLeaveRequestId();

		String LeaveRequestId = lmsLeaveInformationCacheModel.LeaveRequestId;

		if ((LeaveRequestId != null) && (LeaveRequestId.length() == 0)) {
			lmsLeaveInformationCacheModel.LeaveRequestId = null;
		}

		lmsLeaveInformationCacheModel.EmployeeId = getEmployeeId();

		lmsLeaveInformationCacheModel.AbsenceType = getAbsenceType();

		String AbsenceType = lmsLeaveInformationCacheModel.AbsenceType;

		if ((AbsenceType != null) && (AbsenceType.length() == 0)) {
			lmsLeaveInformationCacheModel.AbsenceType = null;
		}

		lmsLeaveInformationCacheModel.LeaveTypeCode = getLeaveTypeCode();

		lmsLeaveInformationCacheModel.LeaveCategoryCode = getLeaveCategoryCode();

		String LeaveCategoryCode = lmsLeaveInformationCacheModel.LeaveCategoryCode;

		if ((LeaveCategoryCode != null) && (LeaveCategoryCode.length() == 0)) {
			lmsLeaveInformationCacheModel.LeaveCategoryCode = null;
		}

		lmsLeaveInformationCacheModel.SupervisorID = getSupervisorID();

		Date StartDate = getStartDate();

		if (StartDate != null) {
			lmsLeaveInformationCacheModel.StartDate = StartDate.getTime();
		}
		else {
			lmsLeaveInformationCacheModel.StartDate = Long.MIN_VALUE;
		}

		Date EndDate = getEndDate();

		if (EndDate != null) {
			lmsLeaveInformationCacheModel.EndDate = EndDate.getTime();
		}
		else {
			lmsLeaveInformationCacheModel.EndDate = Long.MIN_VALUE;
		}

		lmsLeaveInformationCacheModel.Duration = getDuration();

		lmsLeaveInformationCacheModel.ApprovalStatus = getApprovalStatus();

		String ApprovalStatus = lmsLeaveInformationCacheModel.ApprovalStatus;

		if ((ApprovalStatus != null) && (ApprovalStatus.length() == 0)) {
			lmsLeaveInformationCacheModel.ApprovalStatus = null;
		}

		lmsLeaveInformationCacheModel.Comments = getComments();

		String Comments = lmsLeaveInformationCacheModel.Comments;

		if ((Comments != null) && (Comments.length() == 0)) {
			lmsLeaveInformationCacheModel.Comments = null;
		}

		lmsLeaveInformationCacheModel.isDraft = getIsDraft();

		String isDraft = lmsLeaveInformationCacheModel.isDraft;

		if ((isDraft != null) && (isDraft.length() == 0)) {
			lmsLeaveInformationCacheModel.isDraft = null;
		}

		lmsLeaveInformationCacheModel.Approvers = getApprovers();

		Date CreatedDate = getCreatedDate();

		if (CreatedDate != null) {
			lmsLeaveInformationCacheModel.CreatedDate = CreatedDate.getTime();
		}
		else {
			lmsLeaveInformationCacheModel.CreatedDate = Long.MIN_VALUE;
		}

		lmsLeaveInformationCacheModel.ApproverEmails = getApproverEmails();

		String ApproverEmails = lmsLeaveInformationCacheModel.ApproverEmails;

		if ((ApproverEmails != null) && (ApproverEmails.length() == 0)) {
			lmsLeaveInformationCacheModel.ApproverEmails = null;
		}

		return lmsLeaveInformationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{SNo=");
		sb.append(getSNo());
		sb.append(", LeaveRequestId=");
		sb.append(getLeaveRequestId());
		sb.append(", EmployeeId=");
		sb.append(getEmployeeId());
		sb.append(", AbsenceType=");
		sb.append(getAbsenceType());
		sb.append(", LeaveTypeCode=");
		sb.append(getLeaveTypeCode());
		sb.append(", LeaveCategoryCode=");
		sb.append(getLeaveCategoryCode());
		sb.append(", SupervisorID=");
		sb.append(getSupervisorID());
		sb.append(", StartDate=");
		sb.append(getStartDate());
		sb.append(", EndDate=");
		sb.append(getEndDate());
		sb.append(", Duration=");
		sb.append(getDuration());
		sb.append(", ApprovalStatus=");
		sb.append(getApprovalStatus());
		sb.append(", Comments=");
		sb.append(getComments());
		sb.append(", isDraft=");
		sb.append(getIsDraft());
		sb.append(", Approvers=");
		sb.append(getApprovers());
		sb.append(", CreatedDate=");
		sb.append(getCreatedDate());
		sb.append(", ApproverEmails=");
		sb.append(getApproverEmails());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.trianz.lms.model.LMSLeaveInformation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>SNo</column-name><column-value><![CDATA[");
		sb.append(getSNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LeaveRequestId</column-name><column-value><![CDATA[");
		sb.append(getLeaveRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EmployeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>AbsenceType</column-name><column-value><![CDATA[");
		sb.append(getAbsenceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LeaveTypeCode</column-name><column-value><![CDATA[");
		sb.append(getLeaveTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LeaveCategoryCode</column-name><column-value><![CDATA[");
		sb.append(getLeaveCategoryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SupervisorID</column-name><column-value><![CDATA[");
		sb.append(getSupervisorID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>StartDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EndDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Duration</column-name><column-value><![CDATA[");
		sb.append(getDuration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ApprovalStatus</column-name><column-value><![CDATA[");
		sb.append(getApprovalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDraft</column-name><column-value><![CDATA[");
		sb.append(getIsDraft());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Approvers</column-name><column-value><![CDATA[");
		sb.append(getApprovers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ApproverEmails</column-name><column-value><![CDATA[");
		sb.append(getApproverEmails());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LMSLeaveInformation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LMSLeaveInformation.class
		};
	private int _SNo;
	private String _LeaveRequestId;
	private String _originalLeaveRequestId;
	private int _EmployeeId;
	private int _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private String _AbsenceType;
	private int _LeaveTypeCode;
	private String _LeaveCategoryCode;
	private int _SupervisorID;
	private Date _StartDate;
	private Date _EndDate;
	private double _Duration;
	private String _ApprovalStatus;
	private String _originalApprovalStatus;
	private String _Comments;
	private String _isDraft;
	private String _originalIsDraft;
	private int _Approvers;
	private Date _CreatedDate;
	private String _ApproverEmails;
	private String _originalApproverEmails;
	private long _columnBitmask;
	private LMSLeaveInformation _escapedModel;
}