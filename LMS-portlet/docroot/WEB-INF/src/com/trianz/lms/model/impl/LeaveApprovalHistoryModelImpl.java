/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.trianz.lms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.trianz.lms.model.LeaveApprovalHistory;
import com.trianz.lms.model.LeaveApprovalHistoryModel;
import com.trianz.lms.model.LeaveApprovalHistorySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LeaveApprovalHistory service. Represents a row in the &quot;LeaveApprovalHistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.trianz.lms.model.LeaveApprovalHistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveApprovalHistoryImpl}.
 * </p>
 *
 * @author
 * @see LeaveApprovalHistoryImpl
 * @see com.trianz.lms.model.LeaveApprovalHistory
 * @see com.trianz.lms.model.LeaveApprovalHistoryModel
 * @generated
 */
@JSON(strict = true)
public class LeaveApprovalHistoryModelImpl extends BaseModelImpl<LeaveApprovalHistory>
	implements LeaveApprovalHistoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave approval history model instance should use the {@link com.trianz.lms.model.LeaveApprovalHistory} interface instead.
	 */
	public static final String TABLE_NAME = "LeaveApprovalHistory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SNo", Types.INTEGER },
			{ "LeaveRequestId", Types.VARCHAR },
			{ "ApproverID", Types.INTEGER },
			{ "LeaveStatus", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LeaveApprovalHistory (SNo INTEGER not null primary key IDENTITY,LeaveRequestId VARCHAR(75) null,ApproverID INTEGER,LeaveStatus VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LeaveApprovalHistory";
	public static final String ORDER_BY_JPQL = " ORDER BY leaveApprovalHistory.SNo ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LeaveApprovalHistory.SNo ASC";
	public static final String DATA_SOURCE = "devDS";
	public static final String SESSION_FACTORY = "devSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.trianz.lms.model.LeaveApprovalHistory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.trianz.lms.model.LeaveApprovalHistory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.trianz.lms.model.LeaveApprovalHistory"),
			true);
	public static long LEAVEREQUESTID_COLUMN_BITMASK = 1L;
	public static long SNO_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LeaveApprovalHistory toModel(
		LeaveApprovalHistorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LeaveApprovalHistory model = new LeaveApprovalHistoryImpl();

		model.setSNo(soapModel.getSNo());
		model.setLeaveRequestId(soapModel.getLeaveRequestId());
		model.setApproverID(soapModel.getApproverID());
		model.setLeaveStatus(soapModel.getLeaveStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LeaveApprovalHistory> toModels(
		LeaveApprovalHistorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LeaveApprovalHistory> models = new ArrayList<LeaveApprovalHistory>(soapModels.length);

		for (LeaveApprovalHistorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.trianz.lms.model.LeaveApprovalHistory"));

	public LeaveApprovalHistoryModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _SNo;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setSNo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _SNo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveApprovalHistory.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveApprovalHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("SNo", getSNo());
		attributes.put("LeaveRequestId", getLeaveRequestId());
		attributes.put("ApproverID", getApproverID());
		attributes.put("LeaveStatus", getLeaveStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer SNo = (Integer)attributes.get("SNo");

		if (SNo != null) {
			setSNo(SNo);
		}

		String LeaveRequestId = (String)attributes.get("LeaveRequestId");

		if (LeaveRequestId != null) {
			setLeaveRequestId(LeaveRequestId);
		}

		Integer ApproverID = (Integer)attributes.get("ApproverID");

		if (ApproverID != null) {
			setApproverID(ApproverID);
		}

		String LeaveStatus = (String)attributes.get("LeaveStatus");

		if (LeaveStatus != null) {
			setLeaveStatus(LeaveStatus);
		}
	}

	@JSON
	@Override
	public int getSNo() {
		return _SNo;
	}

	@Override
	public void setSNo(int SNo) {
		_SNo = SNo;
	}

	@JSON
	@Override
	public String getLeaveRequestId() {
		if (_LeaveRequestId == null) {
			return StringPool.BLANK;
		}
		else {
			return _LeaveRequestId;
		}
	}

	@Override
	public void setLeaveRequestId(String LeaveRequestId) {
		_columnBitmask |= LEAVEREQUESTID_COLUMN_BITMASK;

		if (_originalLeaveRequestId == null) {
			_originalLeaveRequestId = _LeaveRequestId;
		}

		_LeaveRequestId = LeaveRequestId;
	}

	public String getOriginalLeaveRequestId() {
		return GetterUtil.getString(_originalLeaveRequestId);
	}

	@JSON
	@Override
	public int getApproverID() {
		return _ApproverID;
	}

	@Override
	public void setApproverID(int ApproverID) {
		_ApproverID = ApproverID;
	}

	@JSON
	@Override
	public String getLeaveStatus() {
		if (_LeaveStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _LeaveStatus;
		}
	}

	@Override
	public void setLeaveStatus(String LeaveStatus) {
		_LeaveStatus = LeaveStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public LeaveApprovalHistory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LeaveApprovalHistory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveApprovalHistoryImpl leaveApprovalHistoryImpl = new LeaveApprovalHistoryImpl();

		leaveApprovalHistoryImpl.setSNo(getSNo());
		leaveApprovalHistoryImpl.setLeaveRequestId(getLeaveRequestId());
		leaveApprovalHistoryImpl.setApproverID(getApproverID());
		leaveApprovalHistoryImpl.setLeaveStatus(getLeaveStatus());

		leaveApprovalHistoryImpl.resetOriginalValues();

		return leaveApprovalHistoryImpl;
	}

	@Override
	public int compareTo(LeaveApprovalHistory leaveApprovalHistory) {
		int primaryKey = leaveApprovalHistory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LeaveApprovalHistory)) {
			return false;
		}

		LeaveApprovalHistory leaveApprovalHistory = (LeaveApprovalHistory)obj;

		int primaryKey = leaveApprovalHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LeaveApprovalHistoryModelImpl leaveApprovalHistoryModelImpl = this;

		leaveApprovalHistoryModelImpl._originalLeaveRequestId = leaveApprovalHistoryModelImpl._LeaveRequestId;

		leaveApprovalHistoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveApprovalHistory> toCacheModel() {
		LeaveApprovalHistoryCacheModel leaveApprovalHistoryCacheModel = new LeaveApprovalHistoryCacheModel();

		leaveApprovalHistoryCacheModel.SNo = getSNo();

		leaveApprovalHistoryCacheModel.LeaveRequestId = getLeaveRequestId();

		String LeaveRequestId = leaveApprovalHistoryCacheModel.LeaveRequestId;

		if ((LeaveRequestId != null) && (LeaveRequestId.length() == 0)) {
			leaveApprovalHistoryCacheModel.LeaveRequestId = null;
		}

		leaveApprovalHistoryCacheModel.ApproverID = getApproverID();

		leaveApprovalHistoryCacheModel.LeaveStatus = getLeaveStatus();

		String LeaveStatus = leaveApprovalHistoryCacheModel.LeaveStatus;

		if ((LeaveStatus != null) && (LeaveStatus.length() == 0)) {
			leaveApprovalHistoryCacheModel.LeaveStatus = null;
		}

		return leaveApprovalHistoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{SNo=");
		sb.append(getSNo());
		sb.append(", LeaveRequestId=");
		sb.append(getLeaveRequestId());
		sb.append(", ApproverID=");
		sb.append(getApproverID());
		sb.append(", LeaveStatus=");
		sb.append(getLeaveStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.trianz.lms.model.LeaveApprovalHistory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>SNo</column-name><column-value><![CDATA[");
		sb.append(getSNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LeaveRequestId</column-name><column-value><![CDATA[");
		sb.append(getLeaveRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ApproverID</column-name><column-value><![CDATA[");
		sb.append(getApproverID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>LeaveStatus</column-name><column-value><![CDATA[");
		sb.append(getLeaveStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LeaveApprovalHistory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LeaveApprovalHistory.class
		};
	private int _SNo;
	private String _LeaveRequestId;
	private String _originalLeaveRequestId;
	private int _ApproverID;
	private String _LeaveStatus;
	private long _columnBitmask;
	private LeaveApprovalHistory _escapedModel;
}